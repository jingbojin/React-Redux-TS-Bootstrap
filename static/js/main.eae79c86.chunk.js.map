{"version":3,"sources":["views/pages/counter/Counter.module.css","assets/logo.svg","redux/CounterSlice.ts","views/pages/counter/Counter.tsx","types/Interface.ts","views/pages/exam/PageTitle.tsx","services/api/GetQuestions.ts","router/PagesRouter.tsx","redux/FormSlice.ts","views/components/FreeText.tsx","views/components/SelectedAnswer.tsx","views/components/SingleChoice.tsx","views/components/MultiCheckBox.tsx","views/pages/exam/QuestionContainer.tsx","utils/PrintQuestionLabel.ts","views/pages/exam/Exam.tsx","config/TextProvider.ts","utils/DecideQuestionVisibility.ts","views/pages/result/ResultPageTitle.tsx","views/pages/result/Result.tsx","views/components/Footer.tsx","views/containers/app/App.tsx","redux/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","Number","asyncButton","amount","setTimeout","EQuestionType","PageTitle","React","memo","examName","fetchTest","a","axios","get","baseURL","window","location","origin","then","response","data","catch","error","ERouterUrl","answers","startedTime","finishedTime","formSlice","startTimer","moment","finishTimer","saveAnswer","key","resetForm","selectStartedTime","form","selectFinishedTime","FreeText","readonly","answer","questionId","Form","Control","as","rows","readOnly","plaintext","placeholder","userInput","setUserInput","newValue","currentTarget","SelectedAnswer","options","map","item","Row","Col","xs","includes","color","SingleChoice","question","handleChange","orderId","index","Check","custom","type","id","label","checked","MultiCheckBox","userSelectedItems","setUserSelectedItems","clone","indexOf","splice","newArray","QuestionContainer","singleQuestion","questionTotalCount","visibleYn","Accordion","defaultActiveKey","Card","Toggle","Header","eventKey","printQuestionLabel","Collapse","Body","Title","questionText","freeText","singleSelect","multiCheckbox","fetchApiQuestions","setApiPayload","apiPayload","getTotalPageCount","questionCount","numPerPage","Math","ceil","handlePagePrevious","currentPageNumber","setCurrentPageNumber","handlePageNext","handleFormSubmit","routerHistory","evt","preventDefault","push","result","Exam","useHistory","useEffect","role","testName","onSubmit","Group","controlId","questions","numberOfQuestionsPerPage","length","q","decideQuestionVisibility","loopEachQuestion","questionList","pageControl","Button","variant","totalPageCount","printPaginationText","ResultPageTitle","format","Result","to","exam","PagesRouter","exact","from","default","path","Component","Footer","Badge","pill","href","rel","App","Container","Image","src","logo","store","configureStore","reducer","counterReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.eae79c86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__23GZp\",\"value\":\"Counter_value__3qgwp\",\"button\":\"Counter_button__2Jzyv\",\"textbox\":\"Counter_textbox__2woRS\",\"asyncButton\":\"Counter_asyncButton__3OryT Counter_button__2Jzyv\"};","module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from './store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  selectCount,\r\n} from '../../../redux/CounterSlice';\r\nimport styles from './Counter.module.css';\r\n\r\nexport function Counter() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={e => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount(Number(incrementAmount) || 0))\r\n          }\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\r\n        >\r\n          Add Async\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export enum EQuestionType {\n  singleSelect = 'singleSelect',\n  multiCheckbox = 'multiCheckbox',\n  freeText = 'freeText',\n}\n\nexport interface IOption {\n  key: string;\n  value: string;\n}\n\nexport interface IQuestion {\n  orderId: number;\n  type: EQuestionType;\n  questionText: string;\n  options?: IOption[];\n}\n\nexport interface IApiQuestionsPayload {\n  testName: string;\n  questionList: IQuestion[];\n  pageControl: {\n    numPerPage: number;\n  };\n}\n\nexport interface IFormItem {\n  [key: number]: string | string[];\n}\n\nexport const ANSWER_INPUT_EMIT_NAME = 'answerInputEmitName';\n","import React from 'react';\n\ninterface IProps {\n  examName: string;\n}\n\nexport const PageTitle = React.memo(({examName}: IProps): JSX.Element => {\n  return (\n    <>\n      <h4>{examName}</h4>\n      <br/>\n    </>\n  );\n});\n","import {\n  IApiQuestionsPayload,\n} from '../../types/Interface';\nimport axios from \"axios\";\n\n// Simulate axios api call to fetch exam data:\nexport const fetchTest = async (): Promise<IApiQuestionsPayload> => {\n  // `test_data.json` located under `public`.\n  // It is converted from above const `apiPayload`.\n  return axios.get('https://raw.githubusercontent.com/jingbojin/React-Redux-TS-Bootstrap/gh-pages/test_data.json', { baseURL: window.location.origin })\n    .then((response) => {\n      return response.data;\n    })\n    .catch((error) => {\n      throw error.response.data;\n    });\n}\n","import React from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { Counter } from '../views/pages/counter/Counter';\nimport { Exam } from '../views/pages/exam/Exam';\nimport { Result } from '../views/pages/result/Result';\n\nexport enum ERouterUrl {\n  default = '/',\n  counter = '/counter',\n  exam = '/exam',\n  result = '/result',\n}\n\nexport default class PagesRouter extends React.Component<any, any> {\n  public render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Redirect\n            exact\n            from={ERouterUrl.default}\n            to={ERouterUrl.exam}\n          />\n          <Route\n            exact\n            path={ERouterUrl.exam}\n          >\n            <Exam/>\n          </Route>\n          <Route\n            exact\n            path={ERouterUrl.result}\n          >\n            <Result/>\n          </Route>\n          <Route\n            exact\n            path={ERouterUrl.counter}\n          >\n            <Counter/>\n          </Route>\n          <Redirect from=\"*\" to={ERouterUrl.default}/>\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from './store';\r\nimport { IFormItem } from '../types/Interface';\r\nimport moment, { Moment } from 'moment';\r\n\r\nexport interface ActionAddAnswer {\r\n  key: number,\r\n  value: string | string[],\r\n}\r\n\r\nexport interface FormState {\r\n  answers: IFormItem;\r\n  startedTime: Moment | null;\r\n  finishedTime: Moment | null;\r\n}\r\n\r\n// https://michaelnthiessen.com/state-management-without-vuex/\r\n// https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratchss\r\nexport const initialState: FormState = {\r\n  answers: {},\r\n  startedTime: null,\r\n  finishedTime: null,\r\n}\r\n\r\nexport const formSlice = createSlice({\r\n  name: 'form',\r\n  initialState,\r\n  reducers: {\r\n    startTimer: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.startedTime = moment();\r\n    },\r\n    finishTimer: state => {\r\n      state.finishedTime = moment();\r\n    },\r\n    \r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    saveAnswer: (state, action: PayloadAction<ActionAddAnswer>) => {\r\n      state.answers[action.payload.key] = action.payload.value;\r\n    },\r\n    \r\n    resetForm: state => {\r\n      state = initialState;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { startTimer, finishTimer, saveAnswer, resetForm } = formSlice.actions;\r\n\r\n// NOTE: you can of course, control this flow by your own inside your application logic,\r\n// without using below.\r\n// ******\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const saveAnswerAsync = (answer: ActionAddAnswer): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(saveAnswer(answer));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectAnswers = (state: RootState) => state.form.answers;\r\n\r\nexport const selectStartedTime = (state: RootState) => state.form.startedTime;\r\nexport const selectFinishedTime = (state: RootState) => state.form.finishedTime;\r\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch } from 'react-redux';\nimport { saveAnswer } from '../../redux/FormSlice';\n\ninterface IProps {\n  readonly: boolean;\n  answer: string;\n  questionId: number;\n}\n\nexport const FreeText = React.memo(\n  ({ readonly, answer, questionId }: IProps): JSX.Element => {\n    if (readonly) {\n      return (\n        <Form.Control\n          as=\"textarea\"\n          rows={1}\n          readOnly\n          plaintext\n          placeholder={answer}\n        />\n      );\n    }\n    const [userInput, setUserInput] = useState<string>('');\n    const dispatch = useDispatch();\n    const handleChange = (e: React.BaseSyntheticEvent) => {\n      const newValue = e.currentTarget.value;\n      setUserInput(newValue);\n      dispatch(saveAnswer({\n        key: questionId, value: newValue\n      }));\n    }\n    return (\n      <Form.Control\n        as=\"textarea\"\n        rows={1}\n        value={userInput}\n        onChange={handleChange}\n      />\n    );\n  }\n);\n","import React from 'react';\nimport { IOption } from '../../types/Interface';\nimport { Col, Row } from 'react-bootstrap';\nimport { BsCheckBox } from 'react-icons/bs';\n\ninterface IProps {\n  answer: string | string[];\n  options: IOption[];\n}\n\nexport const SelectedAnswer = React.memo(\n  ({ answer, options }: IProps): JSX.Element => {\n    return (\n      <>\n        {options.map((item) => (\n          <Row>\n            <Col xs={1}>\n              {((answer && answer.includes(item.key)) || answer === item.key) &&\n              <BsCheckBox color={'green'}/>\n              }\n            </Col>\n            <Col xs={11}>\n              <p>\n                {item.value}\n              </p>\n            </Col>\n          </Row>\n        ))}\n      </>\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch } from 'react-redux';\nimport { saveAnswer } from '../../redux/FormSlice';\nimport { IOption, IQuestion } from '../../types/Interface';\nimport { SelectedAnswer } from './SelectedAnswer';\n\ninterface IProps {\n  readonly: boolean;\n  answer: string;\n  question: IQuestion;\n}\n\nexport const SingleChoice = React.memo(\n  ({ readonly, answer, question }: IProps): JSX.Element => {\n    if (readonly) {\n      return (\n        <SelectedAnswer\n          answer={answer}\n          options={question.options as IOption[]}\n        />\n      );\n    }\n    \n    const [userInput, setUserInput] = useState<string>('');\n    const dispatch = useDispatch();\n    \n    const renderSelect = (): JSX.Element[] => {\n      return (question.options as IOption[]).map((e, index) => {\n        // https://github.com/react-bootstrap/react-bootstrap/issues/4056\n        return (\n          <Form.Check\n            custom\n            type='radio'\n            key={`SingleChoice-${question.orderId}-${index}`}\n            id={`SingleChoice-${question.orderId}-${e.key}`}\n            label={e.value}\n            value={e.key}\n            checked={e.key === userInput}\n            onChange={handleChange}\n          />\n        );\n      });\n    }\n    \n    const handleChange = (e: React.BaseSyntheticEvent) => {\n      const newValue = e.currentTarget.value;\n      setUserInput(newValue);\n      dispatch(saveAnswer({\n        key: question.orderId, value: newValue\n      }));\n    }\n    return (\n      <>\n        {renderSelect()}\n      </>\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { useDispatch } from 'react-redux';\nimport { saveAnswer } from '../../redux/FormSlice';\nimport { IOption, IQuestion } from '../../types/Interface';\nimport { SelectedAnswer } from './SelectedAnswer';\n\ninterface IProps {\n  readonly: boolean;\n  answer: string[];\n  question: IQuestion;\n}\n\nexport const MultiCheckBox = React.memo(\n  ({ readonly, answer, question }: IProps): JSX.Element => {\n    if (readonly) {\n      return (\n        <SelectedAnswer\n          answer={answer}\n          options={question.options as IOption[]}\n        />\n      );\n    }\n    \n    const [userSelectedItems, setUserSelectedItems] = useState<string[]>([]);\n    const dispatch = useDispatch();\n    \n    const renderSelect = (): JSX.Element[] => {\n      return (question.options as IOption[]).map((e, index) => {\n        // https://github.com/react-bootstrap/react-bootstrap/issues/4056\n        return (\n          <Form.Check\n            custom\n            type='checkbox'\n            key={`SingleChoice-${question.orderId}-${index}`}\n            id={`SingleChoice-${question.orderId}-${e.key}`}\n            label={e.value}\n            value={e.key}\n            onChange={handleChange}\n          />\n        );\n      });\n    }\n    \n    const handleChange = (e: React.BaseSyntheticEvent) => {\n      const newValue = e.currentTarget.value;\n      if (userSelectedItems.includes(newValue)) {\n        // 1: Removing previous selected item, if double clicked it\n        const clone = [...answer];\n        const index = clone.indexOf(newValue);\n        clone.splice(index, 1);\n        dispatch(saveAnswer({\n          key: question.orderId, value: clone\n        }));\n        setUserSelectedItems(clone);\n      } else {\n        // 2: Adding newly selected item\n        const newArray = [\n          ...userSelectedItems,\n          newValue,\n        ];\n        dispatch(saveAnswer({\n          key: question.orderId, value: newArray\n        }));\n        setUserSelectedItems(newArray);\n      }\n    }\n    return (\n      <>\n        {renderSelect()}\n      </>\n    );\n  }\n);\n","import React from 'react';\nimport { EQuestionType, IQuestion } from '../../../types/Interface';\nimport { Accordion, Card } from 'react-bootstrap';\nimport { printQuestionLabel } from '../../../utils/PrintQuestionLabel';\nimport { FreeText } from '../../components/FreeText';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/store';\nimport { SingleChoice } from '../../components/SingleChoice';\nimport { MultiCheckBox } from '../../components/MultiCheckBox';\n\ninterface IProps {\n  singleQuestion: IQuestion;\n  questionTotalCount: number;\n  readonly: boolean;\n  visibleYn: boolean\n}\n\nexport const QuestionContainer = React.memo(\n  ({\n     singleQuestion,\n     questionTotalCount,\n     readonly,\n     visibleYn,\n   }: IProps): JSX.Element => {\n    const answer = useSelector((state: RootState) => state.form.answers[singleQuestion.orderId]);\n    return (\n      <div className={visibleYn ? 'd-block' : 'd-none'}>\n        <Accordion defaultActiveKey=\"0\">\n          <Card className=\"text-left\">\n            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n              {printQuestionLabel(singleQuestion.orderId, questionTotalCount)}\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                <Card.Title>\n                  <p>{singleQuestion.questionText}</p>\n                </Card.Title>\n                <hr/>\n                  {\n                    (singleQuestion.type === EQuestionType.freeText) && (\n                      <FreeText\n                        readonly={readonly}\n                        answer={answer as string}\n                        questionId={singleQuestion.orderId}\n                      />\n                    )\n                  }\n                  {\n                    (singleQuestion.type === EQuestionType.singleSelect) && (\n                      <SingleChoice\n                        readonly={readonly}\n                        answer={answer as string}\n                        question={singleQuestion}\n                      />\n                    )\n                  }\n                {\n                  (singleQuestion.type === EQuestionType.multiCheckbox) && (\n                    <MultiCheckBox\n                      readonly={readonly}\n                      answer={answer as string[]}\n                      question={singleQuestion}\n                    />\n                  )\n                }\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n        \n        <br/>\n      </div>\n    );\n  });\n","export const printQuestionLabel = (\n  questionId: number,\n  questionTotalCount: number,\n): string => {\n  return `Question ${questionId} of ${questionTotalCount}`;\n}\n","import React, {\n  Dispatch,\n  FormEvent,\n  SetStateAction,\n  useEffect,\n  useState,\n} from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport {\n  EXAM_FORM_CONTROL_ID,\n  SUBMIT_BUTTON_TEXT,\n} from '../../../config/TextProvider';\nimport { PageTitle } from './PageTitle';\nimport { IApiQuestionsPayload, IQuestion } from '../../../types/Interface';\nimport { fetchTest } from '../../../services/api/GetQuestions';\nimport { QuestionContainer } from './QuestionContainer';\nimport { decideQuestionVisibility } from '../../../utils/DecideQuestionVisibility';\nimport { useDispatch } from 'react-redux';\nimport { startTimer, finishTimer, resetForm } from '../../../redux/FormSlice';\nimport { useHistory } from 'react-router-dom';\nimport * as H from 'history';\nimport { ERouterUrl } from '../../../router/PagesRouter';\nimport {\n  BsFiles,\n  BsFillCaretLeftFill,\n  BsFillCaretRightFill,\n} from 'react-icons/bs';\n\nconst fetchApiQuestions = async (\n  setApiPayload: (apiPayload: IApiQuestionsPayload) => void,\n  dispatch: Dispatch<any>,\n) => {\n  dispatch(resetForm());\n  const apiPayload = await fetchTest();\n  // To demonstrate the lifecycle of React:\n  // await new Promise(r => setTimeout(r, 5000));\n  setApiPayload(apiPayload);\n  dispatch(startTimer());\n}\n\nconst loopEachQuestion = (\n  questions: IQuestion[],\n  currentPageNumber: number,\n  numberOfQuestionsPerPage: number,\n): JSX.Element[] => {\n  const questionTotalCount = questions.length;\n  return questions.map((q, index): JSX.Element => {\n    const visibleYn = decideQuestionVisibility(\n      index,\n      currentPageNumber,\n      numberOfQuestionsPerPage,\n    );\n    return (\n      <QuestionContainer\n        key={q.orderId}\n        singleQuestion={q}\n        questionTotalCount={questionTotalCount}\n        readonly={false}\n        visibleYn={visibleYn}\n      />\n    );\n  });\n}\n\nconst getTotalPageCount = (\n  questionCount: number,\n  numPerPage: number\n): number => {\n  return Math.ceil(questionCount / numPerPage);\n}\nconst printPaginationText = (\n  apiPayload: IApiQuestionsPayload,\n  currentPageNumber: number\n): string => {\n  const totalPageCount = getTotalPageCount(\n    apiPayload.questionList.length,\n    apiPayload.pageControl.numPerPage,\n  );\n  return `Page ${currentPageNumber} of ${totalPageCount}`;\n}\n\nconst handlePagePrevious = (\n  currentPageNumber: number,\n  setCurrentPageNumber: Dispatch<SetStateAction<number>>,\n) => {\n  return () => {\n    setCurrentPageNumber(currentPageNumber - 1);\n  }\n}\n\nconst handlePageNext = (\n  currentPageNumber: number,\n  setCurrentPageNumber: Dispatch<SetStateAction<number>>,\n) => {\n  return () => {\n    setCurrentPageNumber(currentPageNumber + 1);\n  }\n}\n\nconst handleFormSubmit = (\n  dispatch: Dispatch<any>,\n  routerHistory: H.History,\n) => {\n  return (evt: FormEvent) => {\n    evt.preventDefault();\n    dispatch(finishTimer());\n    routerHistory.push(ERouterUrl.result);\n  }\n}\n\nexport const Exam = React.memo((): JSX.Element => {\n  const [apiPayload, setApiPayload] = useState<IApiQuestionsPayload | null>(\n    null);\n  const [currentPageNumber, setCurrentPageNumber] = useState<number>(1);\n  const dispatch = useDispatch();\n  const routerHistory = useHistory();\n  \n  useEffect(() => {\n      fetchApiQuestions(setApiPayload, dispatch);\n      /**\n       * https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\n       *\n       * If you want to run an effect and clean it up only once (on mount and\n       * unmount), you can pass an empty array ([]) as a second argument. This\n       * tells React that your effect doesn’t depend on any values from props\n       * or\n       * state, so it never needs to re-run.\n       */\n    }, [dispatch]\n  );\n  \n  if (apiPayload === null) {\n    return (\n      <>\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n        <p>Loading...</p>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <PageTitle examName={apiPayload.testName}/>\n        <Form onSubmit={handleFormSubmit(dispatch, routerHistory)}>\n          <Form.Group controlId={EXAM_FORM_CONTROL_ID}>\n            {loopEachQuestion(\n              apiPayload.questionList,\n              currentPageNumber,\n              apiPayload.pageControl.numPerPage,\n            )}\n          </Form.Group>\n          \n          <Row className=\"my-4\">\n            <Col xs={3}>\n              {currentPageNumber > 1 && (\n                <Button\n                  variant=\"danger\"\n                  onClick={handlePagePrevious(currentPageNumber,\n                    setCurrentPageNumber)}\n                >\n                  <BsFillCaretLeftFill/>Previous\n                </Button>\n              )}\n            </Col>\n            <Col xs={6}>\n              <BsFiles/>{printPaginationText(apiPayload, currentPageNumber)}\n            </Col>\n            <Col xs={3}>\n              {currentPageNumber < getTotalPageCount(\n                apiPayload.questionList.length,\n                apiPayload.pageControl.numPerPage,\n              ) && (\n                <Button\n                  variant=\"danger\"\n                  onClick={handlePageNext(currentPageNumber,\n                    setCurrentPageNumber)}\n                >\n                  Next<BsFillCaretRightFill/>\n                </Button>\n              )}\n            </Col>\n          </Row>\n          {currentPageNumber === getTotalPageCount(\n            apiPayload.questionList.length,\n            apiPayload.pageControl.numPerPage,\n          ) && (\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              className=\"my-3\"\n            \n            >\n              {SUBMIT_BUTTON_TEXT}\n            </Button>\n          )}\n        </Form>\n      </>\n    );\n  }\n});\n","export const EXAM_FORM_CONTROL_ID = 'exam_taking_form';\nexport const SUBMIT_BUTTON_TEXT = 'Finish Now';\nexport const REDIRECT_TEST_BUTTON_TEXT = 'Try Again?';\n","export const decideQuestionVisibility = (\n  index: number,\n  currentPageNumber: number,\n  numberOfQuestionsPerPage: number\n): boolean => {\n  // Notes: `index` starts with 0, `minQuestionIndex` also starts with 0.\n  // However, PageNumber start with 1:\n  const minQuestionIndex = (currentPageNumber - 1) * numberOfQuestionsPerPage;\n  const maxQuestionIndex = (currentPageNumber * numberOfQuestionsPerPage) - 1;\n  return (index >= minQuestionIndex) && (index <= maxQuestionIndex);\n}\n","import { Col, Row } from 'react-bootstrap';\nimport React from 'react';\nimport { Moment } from 'moment';\n\ninterface IProps {\n  testName: string;\n  startedTime: Moment;\n  finishedTime: Moment;\n}\n\nexport const ResultPageTitle = React.memo((\n  { testName, startedTime, finishedTime }: IProps\n): JSX.Element => {\n  return (\n    <>\n      <Row>\n        <Col xs={3} className=\"text-right font-weight-bolder\">Title:</Col>\n        <Col xs={9}>{testName}</Col>\n      </Row>\n      <Row>\n        <Col xs={3} className=\"text-right font-weight-bolder\">Date started</Col>\n        <Col xs={9}>{startedTime.format('MMMM Do YYYY, h:mm:ss a')}</Col>\n      </Row>\n      <Row>\n        <Col xs={3} className=\"text-right font-weight-bolder\">Date finished\n        </Col>\n        <Col xs={9}>{finishedTime.format('MMMM Do YYYY, h:mm:ss a')}</Col>\n      </Row>\n    </>\n  );\n});\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport { Button } from 'react-bootstrap';\nimport {\n  REDIRECT_TEST_BUTTON_TEXT,\n} from '../../../config/TextProvider';\nimport { IApiQuestionsPayload, IQuestion } from '../../../types/Interface';\nimport { fetchTest } from '../../../services/api/GetQuestions';\nimport { QuestionContainer } from '../exam/QuestionContainer';\nimport { useSelector } from 'react-redux';\nimport { ERouterUrl } from '../../../router/PagesRouter';\nimport {\n  selectFinishedTime,\n  selectStartedTime,\n} from '../../../redux/FormSlice';\nimport { ResultPageTitle } from './ResultPageTitle';\nimport { Moment } from 'moment';\nimport { Link } from 'react-router-dom';\n\nconst fetchApiQuestions = async (\n  setApiPayload: (apiPayload: IApiQuestionsPayload) => void,\n) => {\n  const apiPayload = await fetchTest();\n  // To demonstrate the lifecycle of React:\n  // await new Promise(r => setTimeout(r, 5000));\n  setApiPayload(apiPayload);\n}\n\nconst loopEachQuestion = (\n  questions: IQuestion[],\n): JSX.Element[] => {\n  const questionTotalCount = questions.length;\n  return questions.map((q, index): JSX.Element => {\n    return (\n      <QuestionContainer\n        key={q.orderId}\n        singleQuestion={q}\n        questionTotalCount={questionTotalCount}\n        readonly\n        visibleYn\n      />\n    );\n  });\n}\n\nexport const Result = React.memo((): JSX.Element => {\n  const [apiPayload, setApiPayload] = useState<IApiQuestionsPayload | null>(\n    null);\n  const startedTime = useSelector(selectStartedTime);\n  const finishedTime = useSelector(selectFinishedTime);\n  \n  useEffect(() => {\n      fetchApiQuestions(setApiPayload);\n      /**\n       * https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\n       *\n       * If you want to run an effect and clean it up only once (on mount and\n       * unmount), you can pass an empty array ([]) as a second argument. This\n       * tells React that your effect doesn’t depend on any values from props\n       * or\n       * state, so it never needs to re-run.\n       */\n    }, []\n  );\n  \n  if (apiPayload === null) {\n    return (\n      <>\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n        <p>Loading...</p>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <ResultPageTitle\n          testName={apiPayload.testName}\n          startedTime={startedTime as Moment}\n          finishedTime={finishedTime as Moment}\n        />\n        <br/>\n        <>\n          {loopEachQuestion(\n            apiPayload.questionList,\n          )}\n        </>\n        <Link to={ERouterUrl.exam}>\n          <Button\n            variant=\"success\"\n            className=\"my-3\"\n          >\n            {REDIRECT_TEST_BUTTON_TEXT}\n          </Button>\n        </Link>\n      </>\n    );\n  }\n});\n","import React from 'react';\nimport { FaGithub, FaReact, FaVuejs } from 'react-icons/fa';\nimport { Badge } from 'react-bootstrap';\n\nexport const Footer = React.memo((): JSX.Element => {\n    return (\n      <p className=\"align-middle text-center font-weight-lighter\">\n        Part of the vue <FaVuejs color={'green'}/>\n        {' '}<Badge pill variant=\"light\">vs</Badge>{' '}\n        <FaReact color={'blue'}/>{' React '}\n        experiment, click\n        <a\n          className=\"\"\n          href=\"http://vue.jingbojin.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {' here '}<FaGithub color={'black'}/>{' '}\n        </a>\n        for vue version.\n      </p>\n    );\n  }\n);\n","import React from 'react';\r\nimport logo from '../../../assets/logo.svg';\r\nimport './App.css';\r\nimport PagesRouter from '../../../router/PagesRouter';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Footer } from '../../components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container className=\"text-center\">\r\n      <Image src={logo} className=\"App-logo\"/>\r\n      <hr/>\r\n      <PagesRouter/>\r\n      <hr/>\r\n      <Footer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from './CounterSlice';\r\nimport { formSlice } from './FormSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    form: formSlice.reducer,\r\n    // You can of course adding more reducer here, eg:\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the redux load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web redux is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different redux. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './views/containers/app/App';\r\nimport { store } from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your redux to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}